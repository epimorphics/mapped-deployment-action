name: 'Mapped deployment action'
description: 'Build and deploy docker image to ECR based a declarative deployment mapping'
inputs:
  image:
    description: 'Name of the image to build as generated by deployment mapper'
    required: true
  region:
    description: 'AWS region of ECR as extracted by deployment mapper'
    required: true
    
runs:
  using: "composite"
  steps: 
    - name: "Create repository if needed"
      env:
        image: "${{ inputs.image }}"
        region: "${{ inputs.region }}"

      # Loading from script doesn't work using any syntax we've tried, so have to inline them, ugh
      run: |
        if ! aws ecr describe-repositories --region $region --repository-names $image > /dev/null 2>&1 ; then
          aws ecr create-repository --region $region --repository-name $image
          aws ecr set-repository-policy --region $region --repository-name $image --policy-text '{
              "Version": "2008-10-17",
              "Statement": [
                  {
                  "Sid": "Org-wide access",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": [
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:BatchGetImage",
                      "ecr:CompleteLayerUpload",
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:InitiateLayerUpload",
                      "ecr:PutImage",
                      "ecr:UploadLayerPart",
                      "ecr:ListImages"
                  ],
                  "Condition": {
                      "StringEquals": {
                      "aws:PrincipalOrgID": "o-fmu3vfgvz2"
                      }
                  }
                  }
              ]
            }'
            aws ecr put-image-scanning-configuration --region $region --repository-name $image --image-scanning-configuration scanOnPush=true
        fi

      shell: bash

    - name: "Determine tag"
      id: choosetag
      run: |
        git fetch --prune --unshallow --tags
        tag=$( if git describe > /dev/null 2>&1 ; then   git describe; else   git rev-parse --short HEAD; fi )
        echo "::set-output name=tag::${tag}"
      shell: bash

    - name: "Build and push image"
      env:
        image: "${{ inputs.image }}"
        region: "${{ inputs.region }}"
        tag: "${{ steps.choosetag.outputs.tag }}"

      # Loading from script doesn't work using any syntax we've tried, so have to inline them, ugh
      run: |
        function main() {
          check "${image}" "image"
          check "${tag}" "tag"
          check "${region}" "region"

          accountid=$( aws sts get-caller-identity | jq -r .Account )
          ACCOUNT_URL="${accountid}.dkr.ecr.${region}.amazonaws.com"
          export AWS_DEFAULT_REGION=${region}

          docker_build "latest,${tag}" $ACCOUNT_URL
          docker_push_to_ecr "latest,${tag}" $ACCOUNT_URL
        }

        function check() {
          if [ -z "${1}" ]; then
            >&2 echo "Unable to find the ${2} env variable."
            exit 1
          fi
        }

        function docker_build() {
          echo "== START DOCKERIZE"
          local TAG=$1
          local docker_tag_args=""
          local DOCKER_TAGS=$(echo "$TAG" | tr "," "\n")
          for t in $DOCKER_TAGS; do
            docker_tag_args="$docker_tag_args -t $2/$image:$t"
          done

          docker build --build-arg version=${tag} -f Dockerfile $docker_tag_args .
          echo "== FINISHED DOCKERIZE"
        }

        function docker_push_to_ecr() {
          echo "== START PUSH TO ECR"
          local TAG=$1
          local DOCKER_TAGS=$(echo "$TAG" | tr "," "\n")
          for t in $DOCKER_TAGS; do
            docker push $2/${image}:$t
            echo ::set-output name=image::$2/$image:$t
          done
          echo "== FINISHED PUSH TO ECR"
        }

        main      
      shell: bash
